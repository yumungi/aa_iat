<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <title>Alopecia IAT</title>
  <!-- jsPsych core & CSS -->
  <link href="https://unpkg.com/jspsych@7.3.0/css/jspsych.css" rel="stylesheet">
</head>
<body></body>

<!-- jsPsych and plugins -->
<script src="https://unpkg.com/jspsych@7.3.0/jspsych.js"></script>
<script src="https://unpkg.com/@jspsych/plugin-html-button-response"></script>
<script src="https://unpkg.com/@jspsych/plugin-html-keyboard-response"></script>
<!-- Hammer.js for swipe -->
<script src="https://unpkg.com/hammerjs@2.0.8/hammer.min.js"></script>

<script>
(async function(){
  const jsPsych = initJsPsych();

  // 0. Your Google Apps Script endpoint
  const WEB_APP_URL = "https://script.google.com/macros/s/AKfycbw1KZCy_46ZFKajTjZdYH4hRr3Gz0moetyIeYpCBQRe8s15UMrwt3znAsmhzomfN8D7/exec";

  // 1. Stimuli lists
  const alopeciaImages = Array.from({length:5},(_,i)=>`alopecia-${i+1}.jpg`);
  const hairImages    = Array.from({length:5},(_,i)=>`hair-${i+1}.jpg`);
  const goodWords     = ["Friend","Together","Trusted","Familiar","Safe","Accepted","Family","Included"];
  const badWords      = ["Stranger","Isolated","Weird","Rejected","Different","Excluded","Awkward","Them"];

  // Utility to wrap words/images in HTML + assign correct side
  const makeImageTrials = (arr,correct) =>
    arr.map(fn=>({stimulus:`<img src="${fn}" style="max-width:80vw;max-height:60vh;">`, correct}));
  const makeWordTrials  = (arr,correct) =>
    arr.map(w=>({stimulus:`<p style="font-size:2em;">${w}</p>`, correct}));

  // 2. Build each block’s trial array
  // — practice images (Block 1 & 5) each repeated twice for 20 trials
  function repeat(arr,times){ return Array(times).fill(arr).flat(); }
  const block1Trials = jsPsych.randomization.shuffle(
    repeat(makeImageTrials(alopeciaImages,'left')
         .concat(makeImageTrials(hairImages,'right')), 2)
  );
  const block2Trials = jsPsych.randomization.shuffle(
    makeWordTrials(goodWords,'left')  // left = GOOD
      .concat(makeWordTrials(badWords,'right'))
  );
  const block3Trials = jsPsych.randomization.shuffle(
    makeImageTrials(alopeciaImages,'left')
      .concat(makeImageTrials(hairImages,'right'))
      .concat(makeWordTrials(goodWords,'left'))
      .concat(makeWordTrials(badWords,'right'))
  );
  // Block 4 = same as 3, but twice as many test trials
  const block4Trials = jsPsych.randomization.shuffle(
    repeat(block3Trials, 2)
  );
  // Block 5 = reverse image mapping
  const block5Trials = jsPsych.randomization.shuffle(
    repeat(makeImageTrials(hairImages,'left')
         .concat(makeImageTrials(alopeciaImages,'right')), 2)
  );
  // Block 6 = reversed target + original attributes
  const block6Trials = jsPsych.randomization.shuffle(
    makeImageTrials(hairImages,'left')
      .concat(makeImageTrials(alopeciaImages,'right'))
      .concat(makeWordTrials(goodWords,'left'))
      .concat(makeWordTrials(badWords,'right'))
  );
  // Block 7 = twice block6
  const block7Trials = jsPsych.randomization.shuffle(repeat(block6Trials,2));

  // 3. Consent / welcome
  jsPsych.timeline.push({
    type: 'html-button-response',
    stimulus: `
      <h2>Welcome</h2>
      <p>This test measures unconscious bias toward people with alopecia areata.</p>
      <p>You will swipe <strong>left</strong> or <strong>right</strong> to categorise images and words.</p>
      <p>By clicking “I consent,” you agree to participate.</p>`,
    choices: ['I do not consent','I consent'],
    button_html: ['<button class="jspsych-btn">%choice%</button>','<button class="jspsych-btn">%choice%</button>'],
    on_finish: d=>{
      if(d.response===0) jsPsych.endExperiment('You chose not to participate.');
    }
  });

  // 4. Auto-generate participant ID
  const participantID = jsPsych.randomization.randomID(8);
  jsPsych.timeline.push({
    type: 'html-button-response',
    stimulus: `<p>Your participant ID is:</p><h3>${participantID}</h3>`,
    choices: ['Start']
  });

  // 5. Generic swipe trial + feedback
  function makeBlock(blockNum, label, trials) {
    // instruction
    jsPsych.timeline.push({
      type: 'html-button-response',
      stimulus: `<h3>Block ${blockNum}</h3>
        <p>Swipe <strong>left</strong> for <em>${label.left}</em><br>
           Swipe <strong>right</strong> for <em>${label.right}</em></p>`,
      choices: ['Begin']
    });

    // trial + feedback
    jsPsych.timeline.push({
      timeline: [
        {
          type: 'html-keyboard-response',
          stimulus: jsPsych.timelineVariable('stimulus'),
          choices: "NO_KEYS",
          trial_duration: 10000,
          data: {
            participantID,
            block: blockNum,
            correct_response: jsPsych.timelineVariable('correct')
          },
          on_start: trial=>{
            trial.startTime = Date.now();
            if(!window.hammer) window.hammer = new Hammer(document.body);
            trial.swipeFunc = e=>{
              const rt = Date.now() - trial.startTime;
              const resp = (e.type==='swipeleft')?'left':'right';
              const correct = resp === trial.data.correct_response;
              window.hammer.off('swipeleft swiperight', trial.swipeFunc);
              jsPsych.finishTrial({response:resp,rt,correct});
            };
            window.hammer.on('swipeleft swiperight', trial.swipeFunc);
          }
        },
        {
          timeline: [{
            type: 'html-keyboard-response',
            stimulus: '<div style="font-size:4em;color:red;">X</div>',
            choices: [],
            trial_duration: 500
          }],
          conditional_function: ()=> {
            const last = jsPsych.data.get().last(1).values()[0];
            return last.correct===false;
          }
        }
      ],
      timeline_variables: trials,
      randomize_order: true
    });

    // after block: POST data
    jsPsych.timeline.push({
      type: 'call-function',
      func: ()=>{
        const data = jsPsych.data.get().filter({block:blockNum}).values();
        fetch(WEB_APP_URL, {
          method:'POST',
          body: JSON.stringify(data)
        });
      }
    });
  }

  // 6. Build all 7 blocks
  makeBlock(1, {left:'Alopecia',    right:'No Alopecia'},    block1Trials);
  makeBlock(2, {left:'Good',        right:'Bad'},            block2Trials);
  makeBlock(3, {left:'Alopecia + Good',   right:'No Alopecia + Bad'}, block3Trials);
  makeBlock(4, {left:'Alopecia + Good',   right:'No Alopecia + Bad'}, block4Trials);
  makeBlock(5, {left:'No Alopecia', right:'Alopecia'},      block5Trials);
  makeBlock(6, {left:'Good + No Alopecia', right:'Bad + Alopecia'}, block6Trials);
  makeBlock(7, {left:'Good + No Alopecia', right:'Bad + Alopecia'}, block7Trials);

  // 7. Debrief: accuracy + D-score
  jsPsych.timeline.push({
    type: 'html-button-response',
    stimulus: ()=> {
      const all = jsPsych.data.get().filter(trial=>trial.correct!==undefined).values();
      const acc = all.filter(t=>t.correct).length / all.length;
      // D-score: difference of means / pooled SD
      const d4 = jsPsych.data.get().filter({block:4,correct:true}).select('rt').values;
      const d7 = jsPsych.data.get().filter({block:7,correct:true}).select('rt').values;
      const clean = arr=>arr.filter(rt=>rt>=300 && rt<=10000);
      const m4 = clean(d4).reduce((a,b)=>a+b,0)/clean(d4).length;
      const m7 = clean(d7).reduce((a,b)=>a+b,0)/clean(d7).length;
      const allRT = clean(d4).concat(clean(d7));
      const sd  = Math.sqrt(allRT.map(x=>Math.pow(x - (m4+m7)/2,2)).reduce((a,b)=>a+b,0)/(allRT.length));
      const d   = (m7 - m4)/sd;
      return `
        <h2>All done!</h2>
        <p>Your accuracy: ${(acc*100).toFixed(1)}%</p>
        <p>Your IAT D-score: ${d.toFixed(2)}</p>
      `;
    },
    choices: ['Finish']
  });

  // 8. Run it
  jsPsych.run();
})();
</script>
